openapi: 3.0.3
info:
  title: Motorsports Manager
  version: 1.0.0
  description: The ultimate gaming experience
  contact:
    name: SDET
    email: sdet@praegus.nl
servers:
  - url: http://localhost:8080
paths:
  /chassis:
    get:
      summary: Get all chassis
      operationId: getChassis
      tags:
        - chassis
      responses:
        200:
          description: chassis
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChassisResponse'
  /profiles:
    get:
      summary: Get all profiles
      operationId: getAllProfiles
      tags:
        - profile
      responses:
        200:
          description: Retrieve all profiles
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ProfileResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    post:
      summary: Create a new profile
      operationId: createProfile
      tags:
        - profile
      requestBody:
        $ref: '#/components/requestBodies/ProfileRequest'
      responses:
        201:
          description: New profile created
          headers:
            location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        409:
          $ref: '#/components/responses/ConflictResponse'

  /profiles/{name}:
    get:
      summary: Retrieve a profile by name
      operationId: getProfileByName
      tags:
        - profile
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProfileName'
      responses:
        200:
          description: Response profile object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
components:
  schemas:
    ChassisResponse:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
    ProfileResponse:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ProfileName'
        seasons:
          $ref: '#/components/schemas/Seasons'
    Seasons:
      type: array
      items:
        $ref: '#/components/schemas/Season'
    Season:
      type: object
      properties:
        name:
          type: string
        racingClass:
          type: string
        accountBalance:
          type: integer
          format: int32
        vehicle:
          $ref: '#/components/schemas/Vehicle'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
    Vehicle:
      type: object
      properties:
        wheels:
          type: string
        engine:
          type: string
        chassis:
          type: string
    Track:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        prizeMoney:
          type: integer
          format: int32
    ProfileName:
      description: 'Name of the profile to create'
      type: string
      pattern: '^[a-zA-Z0-9]*$'
      example: 'MyProfile'
      minLength: 1
      maxLength: 10
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: a URI identifier that categorizes the error
        title:
          type: string
          description: a brief, human-readable message about the error
        status:
          type: integer
          description: the HTTP response code (optional)
        detail:
          type: string
          description: a human-readable explanation of the error
        instance:
          type: string
          description: a URI that identifies the specific occurrence of the error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
    FieldError:
      type: object
      properties:
        field:
          type: string
          description: the field that the error is thrown on
        error:
          type: string
          description: the error message
  requestBodies:
    ProfileRequest:
      description: Json object containing profile name
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/ProfileName'
  responses:
    NotFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ConflictResponse:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  headers:
    Location:
      description: Location of the created resource
      schema:
        type: string